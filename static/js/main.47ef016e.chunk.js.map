{"version":3,"sources":["components/Section.js","components/Statistics.js","components/FeedbackOptions.js","components/Notification.js","App.js","index.js"],"names":["Section","title","children","Statistics","good","neutral","bad","total","positivePercentege","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","Notification","message","App","state","countTotalFeedback","countPositiveFeedbackPercentage","result","percentage","Math","round","e","target","setState","previousCounter","this","objKey","Object","keys","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAgBeA,EAbC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,qCACE,6BAAKD,IACJC,MCmBQC,EAtBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,mCACE,eAAC,EAAD,CAASP,MAAM,aAAf,UACE,uCAAUG,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,aCeOC,EAvBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,mCACE,cAAC,EAAD,CAASV,MAAM,wBAAf,SACGS,EAAQE,KAAI,SAACC,GAAD,OACX,wBAEEC,KAAK,SACLC,KAAMF,EACNG,QAASL,EAJX,SAMGE,GALIA,WCKFI,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,mCACE,4BAAIA,OCgDKC,E,4MAhDbC,MAAQ,CACNhB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPe,mBAAqB,WAAO,IAAD,EACM,EAAKD,MAEpC,OAHyB,EACjBhB,KADiB,EACXC,QADW,EACFC,K,EAIzBgB,gCAAkC,WAChC,IAAMC,EAAS,EAAKF,qBAEdG,EAAqB,IADV,EAAKJ,MAAdhB,KAC0BmB,EAClC,OAAOE,KAAKC,MAAMF,I,EAEpBb,gBAAkB,SAACgB,GACjB,IAAMZ,EAAOY,EAAEC,OAAOb,KACtB,EAAKc,UAAS,SAACC,GAAD,sBAAyBf,EAAOe,EAAgBf,GAAQ,O,uDAE9D,IAAD,EACwBgB,KAAKX,MAA5BhB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,EAAQwB,KAAKV,qBACbb,EAAqBuB,KAAKT,kCAC1BU,EAASC,OAAOC,KAAKH,KAAKX,OAEhC,OACE,qCACE,cAAC,EAAD,CACEV,QAASsB,EACTrB,gBAAiBoB,KAAKpB,kBAEb,IAAVJ,EACC,cAAC,EAAD,CAAcW,QAAQ,sBAEtB,cAAC,EAAD,CACEd,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,W,GAzCd2B,aCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.47ef016e.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <>\n      <h2>{title}</h2>\n      {children}\n    </>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Section from \"./Section\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentege }) => {\n  return (\n    <>\n      <Section title=\"Statistics\">\n        <p>Good: {good}</p>\n        <p>Neutral: {neutral}</p>\n        <p>Bad: {bad}</p>\n        <p>Total: {total}</p>\n        <p>Positive feedback: {positivePercentege}%</p>\n      </Section>\n    </>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentege: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Section from \"./Section\";\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        {options.map((option) => (\n          <button\n            key={option}\n            type=\"button\"\n            name={option}\n            onClick={onLeaveFeedback}\n          >\n            {option}\n          </button>\n        ))}\n      </Section>\n    </>\n  );\n};\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => {\n  return (\n    <>\n      <p>{message}</p>\n    </>\n  );\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { Component } from \"react\";\nimport Statistics from \"./components/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Notification from \"./components/Notification\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    const result = good + neutral + bad;\n    return result;\n  };\n  countPositiveFeedbackPercentage = () => {\n    const result = this.countTotalFeedback();\n    const { good } = this.state;\n    const percentage = (good * 100) / result;\n    return Math.round(percentage);\n  };\n  onLeaveFeedback = (e) => {\n    const name = e.target.name;\n    this.setState((previousCounter) => ({ [name]: previousCounter[name] + 1 }));\n  };\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const positivePercentege = this.countPositiveFeedbackPercentage();\n    const objKey = Object.keys(this.state);\n\n    return (\n      <>\n        <FeedbackOptions\n          options={objKey}\n          onLeaveFeedback={this.onLeaveFeedback}\n        />\n        {total === 0 ? (\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentege={positivePercentege}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}